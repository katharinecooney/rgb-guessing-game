{"version":3,"sources":["Square.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentColor","color","handleCheckForWin","bind","assertThisInitialized","handleColorChange","handleClick","console","log","hasWon","setState","checkForWin","react_default","a","createElement","onClick","className","style","backgroundColor","Component","red","Math","floor","random","green","blue","numSquares","concat","Game","createRandomColor","squaresArray","Array","from","length","randomColors","shuffle","setDifficulty","resetGame","_this2","someRandomColors","x","allRandomColors","toConsumableArray","shuffledColors","i","push","splice","clickedColor","num","_this3","_this4","_this5","map","square","src_Square_0","key","uuid","App","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAuCeA,qBAnCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAcR,EAAKD,MAAMU,OAE3BT,EAAKU,kBAAoBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IACzBA,EAAKa,kBAAoBb,EAAKa,kBAAkBF,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IACzBA,EAAKc,YAAcd,EAAKc,YAAYH,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IAPHA,mFAWhBe,QAAQC,IAAI,wBACXb,KAAKJ,MAAMkB,QAAUd,KAAKe,SAAS,CAClCV,aAAc,8DAKhBO,QAAQC,IAAI,gBACZb,KAAKJ,MAAMoB,YAAYhB,KAAKJ,MAAMU,6CAIlCN,KAAKO,oBACLP,KAAKU,qDAIL,OACEO,EAAAC,EAAAC,cAAA,OAAKC,QAASpB,KAAKW,YAAcU,UAAU,SAASC,MAAO,CAACC,gBAAiBvB,KAAKI,MAAMC,uBA9BzEmB,+BCEjBC,SAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,WACtBC,EAAQH,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBE,EAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAEvBG,GADW,OAAAC,OAAUP,EAAV,MAAAO,OAAkBH,EAAlB,MAAAG,OAA4BF,EAA5B,KACE,GAiHFG,cA9Gb,SAAAA,EAAYrC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IAChBpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMJ,KACDQ,MAAQ,CACXE,MAAOT,EAAKqC,oBACZC,aAAcC,MAAMC,KAAK,CAACC,OAAQP,IAClCQ,aAAc,GACdzB,QAAQ,GAEVjB,EAAKqC,kBAAoBrC,EAAKqC,kBAAkB1B,KAAvBV,OAAAW,EAAA,EAAAX,CAAAD,IACzBA,EAAK2C,QAAU3C,EAAK2C,QAAQhC,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IACfA,EAAKmB,YAAcnB,EAAKmB,YAAYR,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IACnBA,EAAK4C,cAAgB5C,EAAK4C,cAAcjC,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IACrBA,EAAK6C,UAAY7C,EAAK6C,UAAUlC,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IAZDA,mFAgBhBG,KAAKwC,4CAOL,IAJQ,IAAAG,EAAA3C,KACJ4C,EAAmBR,MAAMC,KAAKD,MAAMC,KAAK,CAACC,OAAQP,EAAa,IAAK,SAAAc,GAAC,OAAIF,EAAKT,sBAC9EY,EAAe,CAAI9C,KAAKI,MAAME,OAAf0B,OAAAlC,OAAAiD,EAAA,EAAAjD,CAAyB8C,IACxCI,EAAiB,GACfF,EAAgBR,OAAS,GAAE,CAC/B,IAAIW,EAAIvB,KAAKC,MAAMD,KAAKE,SAAWkB,EAAgBR,QACnDU,EAAeE,KAAKJ,EAAgBG,IACpCH,EAAgBK,OAAOF,EAAE,GAE3BjD,KAAKe,SAAS,CACZwB,aAAcS,gDAKhB,IAAIvB,EAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBC,EAAQH,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBE,EAAOJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAE3B,MADe,OAAAI,OAAUP,EAAV,MAAAO,OAAkBH,EAAlB,MAAAG,OAA4BF,EAA5B,yCAILsB,GACVxC,QAAQC,IAAIuC,GACTA,IAAiBpD,KAAKI,MAAME,OAC7BN,KAAKe,SAAS,CACZD,QAAQ,0CAKAuC,GAAI,IAAAC,EAAAtD,KAChB+B,EAAasB,EACbrD,KAAKe,SAAS,CACZT,MAAON,KAAKkC,oBACZK,aAAc,GACdzB,QAAQ,EACRqB,aAAcC,MAAMC,KAAK,CAACC,OAAQP,KACjC,kBAAMuB,EAAKd,gDAGL,IAAAe,EAAAvD,KACTA,KAAKe,SAAS,CACZT,MAAON,KAAKkC,oBACZK,aAAc,GACdzB,QAAQ,EACRqB,aAAcC,MAAMC,KAAK,CAACC,OAAQP,KACjC,kBAAMwB,EAAKf,6CAKP,IAAAgB,EAAAxD,KACP,OACEiB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,iBACMF,EAAAC,EAAAC,cAAA,YAAOnB,KAAKI,MAAME,OADxB,mBAGAW,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAK0C,WAEjB1C,KAAKI,MAAMU,OAAmB,aAAV,UAI3BG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0BACbJ,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMoC,EAAKf,cAAc,KAA1C,QACAxB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMoC,EAAKf,cAAc,KAA1C,UACAxB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMoC,EAAKf,cAAc,KAA1C,WAINxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACZrB,KAAKI,MAAM+B,aAAasB,IAAK,SAACC,EAAQT,GAAT,OAC9BhC,EAAAC,EAAAC,cAACwC,EAAD,CACE7C,OAAQ0C,EAAKpD,MAAMU,OACnBE,YAAawC,EAAKxC,YAClBV,OACwB,IAAtBkD,EAAKpD,MAAMU,OACX0C,EAAKpD,MAAME,MACXkD,EAAKpD,MAAMmC,aAAaU,GAC1BW,IAAKC,mBAvGErC,aCCJsC,MARf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAC4C,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c729bee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Square.css';\n\nclass Square extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentColor: this.props.color,\n    }\n    this.handleCheckForWin = this.handleCheckForWin.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleColorChange(){\n    console.log('handle color change');\n    !this.props.hasWon && this.setState({\n      currentColor: 'rgb(0, 0, 53)'\n    })\n  }\n\n  handleCheckForWin(){\n    console.log('handle click');\n    this.props.checkForWin(this.props.color);\n  }\n\n  handleClick(){\n    this.handleCheckForWin();\n    this.handleColorChange();\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}  className=\"Square\" style={{backgroundColor: this.state.currentColor}}>\n      </div>\n    )\n  }\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './Square';\nimport uuid from 'uuid';\nimport './Game.css';\n\nlet red = Math.floor(Math.random() * 256);\nlet green = Math.floor(Math.random() * 256);\nlet blue = Math.floor(Math.random() * 256);\nlet randomColor = `rgb(${red}, ${green}, ${blue})`\nlet numSquares = 6;\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      color: this.createRandomColor(),\n      squaresArray: Array.from({length: numSquares}),\n      randomColors: [],\n      hasWon: false\n    }\n    this.createRandomColor = this.createRandomColor.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.checkForWin = this.checkForWin.bind(this);\n    this.setDifficulty = this.setDifficulty.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  componentDidMount(){\n    this.shuffle();\n  }\n\n  shuffle() {\n    let someRandomColors = Array.from(Array.from({length: numSquares - 1}), x => this.createRandomColor());\n    let allRandomColors = [this.state.color, ...someRandomColors]\n    var shuffledColors = [];\n    while(allRandomColors.length > 0){\n      var i = Math.floor(Math.random() * allRandomColors.length);\n      shuffledColors.push(allRandomColors[i]);\n      allRandomColors.splice(i,1);\n    }\n    this.setState({\n      randomColors: shuffledColors\n    })\n} \n\n  createRandomColor(){\n    let red = Math.floor(Math.random() * 256);\n    let green = Math.floor(Math.random() * 256);\n    let blue = Math.floor(Math.random() * 256);\n    let randomColor = `rgb(${red}, ${green}, ${blue})`;\n    return randomColor;\n  }\n\n  checkForWin(clickedColor){\n    console.log(clickedColor);\n    if(clickedColor === this.state.color) {\n      this.setState({\n        hasWon: true\n      })\n    } \n  }\n\n  setDifficulty(num){\n    numSquares = num;\n    this.setState({\n      color: this.createRandomColor(),\n      randomColors: [],\n      hasWon: false,\n      squaresArray: Array.from({length: numSquares})\n    }, () => this.shuffle());\n  }\n\n  resetGame(){\n    this.setState({\n      color: this.createRandomColor(),\n      randomColors: [],\n      hasWon: false,\n      squaresArray: Array.from({length: numSquares})\n    }, () => this.shuffle());\n  }\n\n  // style={{backgroundColor: this.state.hasWon ? this.state.color : 'rgb(6, 173, 179)'}}\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"Game-title\" >\n          <h1>\n            The <span>{this.state.color}</span> Guessing Game!\n          </h1>\n          <div className=\"Game-buttonContainer\">\n            <div className=\"Game-resetButton\">\n              <button onClick={this.resetGame}> \n                {\n                  !this.state.hasWon ? 'RESET' : 'PLAY AGAIN'\n                }\n              </button>\n            </div>\n            <div className=\"Game-difficultyButtons\">\n              <button onClick={() => this.setDifficulty(3)}>easy</button>\n              <button onClick={() => this.setDifficulty(6)}>medium</button>\n              <button onClick={() => this.setDifficulty(9)}>hard</button>\n            </div>\n          </div> \n        </div>\n        <div className=\"Game-squareContainer\">\n          {this.state.squaresArray.map( (square, i) => \n          <Square \n            hasWon={this.state.hasWon}\n            checkForWin={this.checkForWin} \n            color={\n              this.state.hasWon === true ? \n              this.state.color :\n              this.state.randomColors[i]} \n            key={uuid()}\n          />)}\n        </div>  \n      </div>\n    )\n  }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}